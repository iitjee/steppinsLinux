EXPLICIT RULES:
Most rules you will write are explicit rules that specify particular files as targets and prerequisites. 

A rule can have more than one target. This means that each target has the same set of prerequisites as the others. If the 
targets are out of date, the same set of actions will be performed to update each one. 

                    vpath.o variable.o: make.h config.h getopt.h gettext.h dep.h

This indicates that both vpath.o and variable.o depend on the same set of C header files. 
This line has the same effect as:

                    vpath.o: make.h config.h getopt.h gettext.h dep.h
                    variable.o: make.h config.h getopt.h gettext.h dep.h
                    
The two targets are handled independently. If either object file is out of date with
respect to any of its prerequisites (that is, any header file has a newer modification
time than the object file), make will update the object file by executing the commands
associated with the rule.


Each time make sees a target file it adds the target and prerequisites to the dependency graph. If a target has already
been seen and exists in the graph, any additional prerequisites are appended to the target file entry in make’s dependency 
graph. 
EXAMPLE 1: (very Simple)
                    vpath.o: vpath.c make.h config.h getopt.h gettext.h dep.h
                    vpath.o: filedef.h hash.h job.h commands.h variable.h vpath.h



EXAMPLE 2:
                    # Make sure lexer.c is created before vpath.c is compiled.
                    vpath.o: lexer.c
                    ...
                    # Compile vpath.c with special flags.
                    vpath.o: vpath.c
                     $(COMPILE.c) $(RULE_FLAGS) $(OUTPUT_OPTION) $<
                    ...
                    # Include dependencies generated by a program.
                    include auto-generated-dependencies.d

The first rule says that the vpath.o target must be updated whenever lexer.c is
updated (perhaps because generating lexer.c has other side effects). The rule also
works to ensure that a prerequisite is always updated before the target is updated.
(Notice the bidirectional nature of rules. In the “forward” direction the rule says that
if the lexer.c has been updated, perform the action to update vpath.o. In the “backward”
direction, the rule says that if we need to make or use vpath.o ensure that
lexer.c is upto date first.)

This rule might be placed near the rules for managing
lexer.c so developers are reminded of this subtle relationship. 

Later, the compilation rule for vpath.o is placed among other compilation rules. The command for this rule
uses three make variables. You’ll be seeing a lot of these, but for now you just need to
know that a variable is either a dollar sign followed by a single character or a dollar
sign followed by a word in parentheses. (I will explain more later in this chapter and
a lot more in Chapter 3.) Finally, the .o/.h dependencies are included in the makefile
from a separate file managed by an external program.
